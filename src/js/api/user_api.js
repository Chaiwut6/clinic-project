const fetchAppointments = async () => {
  try {
    const response = await axios.post('http://localhost:8000/api/users/appointment', null, {
      withCredentials: true,
    });

    if (response.status === 200 && response.data.success) {
      const { pendingAppointment, confirmedAppointment } = response.data;
      const appointmentTable = document.getElementById('userAppointment');
      appointmentTable.innerHTML = ''; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤

      const formatTime = (time) => {
        if (!time) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        const [hours, minutes] = time.split(':').map(Number);
        const date = new Date();
        date.setHours(hours, minutes);
        date.setMinutes(date.getMinutes() - 15); 
        return date.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' });
      };

      // üîπ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
      if (pendingAppointment) {
        const formattedDate = new Intl.DateTimeFormat('th-TH', {
          day: 'numeric',
          month: 'long',
          year: 'numeric',
        }).format(new Date(pendingAppointment.date));

        const row = `
          <tr>
            <td>${pendingAppointment.doc_name || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î'}</td>
            <td>${formattedDate || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î'}</td>
            <td>${formatTime(pendingAppointment.time_start)}</td>
            <td>${pendingAppointment.time_end || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</td>
            <td class="text-center">
              <button class="btn btn-success" onclick="updateStatus('${pendingAppointment.Appointment_id}', '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô')">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</button>
              <button class="btn btn-danger" onclick="updateStatus('${pendingAppointment.Appointment_id}', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
            </td>
          </tr>
        `;
        appointmentTable.innerHTML = row;
      }
      // üîπ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      else if (confirmedAppointment) {
        const formattedDate = new Intl.DateTimeFormat('th-TH', {
          day: 'numeric',
          month: 'long',
          year: 'numeric',
        }).format(new Date(confirmedAppointment.date));

        const row = `
          <tr>
            <td>${confirmedAppointment.doc_name || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î'}</td>
            <td>${formattedDate || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î'}</td>
            <td>${formatTime(confirmedAppointment.time_start)}</td>
            <td class="text-center">
              <button class="btn btn-secondary" disabled>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</button>
            </td>
          </tr>
        `;
        appointmentTable.innerHTML = row;
      } else {
        // üîπ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏ö‡∏ö
        appointmentTable.innerHTML = '<tr><td colspan="5" class="text-center">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢</td></tr>';
      }
    } else {
      alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢');
    }
  } catch (error) {
    console.error('Error fetching appointments:', error);
    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  }
};






  const updateStatus = async (Appointment_id, status) => {
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
      const response = await axios.post('http://localhost:8000/api/users/update-appointment', {
        Appointment_id: Appointment_id,
        status: status
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      if (response.status === 200 && response.data.success) {
        alert(`‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô ${status}`);

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fetchAppointments ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        fetchAppointments();
      } else {
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
      }
    } catch (error) {
      console.error('Error updating status:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
    }
  };

  

  document.addEventListener("DOMContentLoaded", () => {
    const currentPage = window.location.pathname.split("/").pop();
  
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ user_main.html ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (currentPage === "user_main.html") {
      fetchAppointments();
    }
  });
  